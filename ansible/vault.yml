---
# Déploiement Vault automatique
# Vérification conteneur Vault existant
- name: Vérification conteneur Vault existant
  command: docker ps -a --format "{{ '{{' }}.Names{{ '}}' }}" --filter "name=vault"
  register: vault_exists
  failed_when: false
  changed_when: false

- name: Démarrage du conteneur Vault existant
  command: docker start vault
  when: "'vault' in vault_exists.stdout"
  failed_when: false

- name: Arrêt services Vault existants (seulement si recréation nécessaire)
  shell: |
    cd {{ ansible_env.PWD }}/ansible/vault-ansible
    docker compose down || true
  failed_when: false
  when: "'vault' not in vault_exists.stdout"

# Configuration Vault
- name: Création répertoires Vault
  file:
    path: "{{ ansible_env.PWD }}/ansible/vault-ansible/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - vault-data
    - vault-config
    - vault-logs
  when: "'vault' not in vault_exists.stdout"

- name: Configuration Vault
  copy:
    content: |
      storage "file" {
        path = "/vault/data"
      }
      
      listener "tcp" {
        address     = "0.0.0.0:8200"
        tls_disable = 1
      }
      
      ui = true
      cluster_addr = "https://127.0.0.1:8201"
      api_addr = "http://127.0.0.1:8200"
      disable_mlock = true
    dest: "{{ ansible_env.PWD }}/ansible/vault-ansible/vault-config/vault.hcl"
    mode: '0644'
  when: "'vault' not in vault_exists.stdout"

- name: Configuration Docker Compose Vault
  copy:
    content: |
      services:
        vault:
          image: hashicorp/vault:latest
          container_name: vault
          ports:
            - "8200:8200"
          environment:
            - VAULT_DEV_ROOT_TOKEN_ID=myroot
            - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
          cap_add:
            - IPC_LOCK
          restart: unless-stopped
          networks:
            - vault-network
      
      networks:
        vault-network:
          driver: bridge
    dest: "{{ ansible_env.PWD }}/ansible/vault-ansible/docker-compose.yml"
    mode: '0644'
  when: "'vault' not in vault_exists.stdout"

# Démarrage Vault
- name: Démarrage Vault (création si nécessaire)
  shell: |
    cd {{ ansible_env.PWD }}/ansible/vault-ansible
    docker compose up -d
  when: "'vault' not in vault_exists.stdout"

- name: Attente Vault
  wait_for:
    port: 8200
    host: localhost
    timeout: 60

# Test Vault
- name: Test Vault
  uri:
    url: http://localhost:8200/v1/sys/health
    method: GET
    timeout: 10
    status_code: [200, 429, 472, 501, 503]
  register: vault_health
  until: vault_health.status == 200
  retries: 12
  delay: 5

# Configuration secrets Vault
- name: Configuration secrets Vault
  shell: |
    docker exec -e VAULT_ADDR=http://localhost:8200 -e VAULT_TOKEN=myroot vault sh -c "
    # Activation KV store
    vault secrets enable -version=2 -path=secret kv 2>/dev/null || true
    
    # Secrets de base de données
    vault kv put secret/database host=localhost port=5432 database=sit_inov_dev username=postgres password=password
    
    # Secrets Redis
    vault kv put secret/redis host=localhost port=6379 password=''
    
    # Secrets JWT
    vault kv put secret/jwt secret=dev_jwt_secret_key_very_long_and_secure expires_in=24h
    
    # Secrets NextAuth
    vault kv put secret/nextjs nextauth_secret=dev_nextauth_secret nextauth_url=http://localhost:3000
    
    echo '✅ Secrets créés avec succès'
    "
  register: vault_secrets_result
  failed_when: false

# Résumé
- name: Résumé Vault
  debug:
    msg: |
      ✅ Vault déployé avec succès !
      
      🔐 Accès Vault :
      - Interface: http://localhost:8200
      - Token: myroot
      - Status: {{ 'OK' if vault_health.status == 200 else 'ERREUR' }}
      
      🔑 Secrets disponibles :
      - secret/database
      - secret/redis
      - secret/jwt
      - secret/nextjs
      
      📋 Commandes utiles :
      - docker exec -e VAULT_ADDR=http://localhost:8200 -e VAULT_TOKEN=myroot vault vault kv list secret/
      - docker exec -e VAULT_ADDR=http://localhost:8200 -e VAULT_TOKEN=myroot vault vault kv get secret/database
